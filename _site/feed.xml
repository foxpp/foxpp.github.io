<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fox Blog</title>
    <description>fox blog</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 08 Dec 2015 21:56:19 +0800</pubDate>
    <lastBuildDate>Tue, 08 Dec 2015 21:56:19 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Activiti - 1</title>
        <description>&lt;h1 id=&quot;activiti&quot;&gt;Activiti&lt;/h1&gt;

&lt;h2 id=&quot;processengine&quot;&gt;ProcessEngine&lt;/h2&gt;

&lt;p&gt;ProcessEngine是Activiti的核心，目前有如下几种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration: 单独运行的流程引擎。Activiti会自己处理事务。 默认，数据库只在引擎启动时检测 （如果没有Activiti的表或者表结构不正确就会抛出异常）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration: 单元测试时的辅助类。Activiti会自己控制事务。 默认使用H2内存数据库。数据库表会在引擎启动时创建，关闭时删除。 使用它时，不需要其他配置（除非使用job执行器或邮件功能）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.activiti.spring.SpringProcessEngineConfiguration: 在Spring环境下使用流程引擎。 参考Spring集成章节。
org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration: 单独运行流程引擎，并使用JTA事务。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;快速开始&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    ProcessEngine processEngine = ProcessEngineConfiguration
            .createStandaloneInMemProcessEngineConfiguration()
            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE)
            .setJdbcUrl(&quot;jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000&quot;)
            .setJobExecutorActivate(true)
            .buildProcessEngine();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式不需要任何的配置,可以快速开始一个引擎&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/08/Activiti-1/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/08/Activiti-1/</guid>
        
        
      </item>
    
      <item>
        <title>Vim learning</title>
        <description>&lt;h1 id=&quot;vim&quot;&gt;vim操作&lt;/h1&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;常用操作&lt;/p&gt;

    &lt;p&gt;i - 光标插入&lt;/p&gt;

    &lt;p&gt;x - 当前光标删除一个字符&lt;/p&gt;

    &lt;p&gt;X - 删除当前光标前一个字符&lt;/p&gt;

    &lt;p&gt;J - 删除两行之间的换行符s&lt;/p&gt;

    &lt;p&gt;u - 撤销上一次操作&lt;/p&gt;

    &lt;p&gt;U - 撤销当前行操作&lt;/p&gt;

    &lt;p&gt;ctrl + r - 重做上一步,撤销的逆向&lt;/p&gt;

    &lt;p&gt;a - 当前光标下追加&lt;/p&gt;

    &lt;p&gt;o - 当前光标的下方新起一行并进入插入模式&lt;/p&gt;

    &lt;p&gt;O - 当前光标的上方新起一行并进入插入模式&lt;/p&gt;

    &lt;p&gt;h - 左&lt;/p&gt;

    &lt;p&gt;j - 下&lt;/p&gt;

    &lt;p&gt;k - 上&lt;/p&gt;

    &lt;p&gt;l - 右&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;pre&gt;&lt;code&gt;以上4个方向如果前面带数字就表示移动多少 ,10j表示向下移动10行
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;ZZ - 保存并退出，相当于 :wq&lt;/p&gt;

    &lt;p&gt;w - 移动光标到下一个词首&lt;/p&gt;

    &lt;p&gt;b - 移动光标到上一个词首&lt;/p&gt;

    &lt;p&gt;e - 移动光标到下一个词末&lt;/p&gt;

    &lt;p&gt;ge - 移动光标到上一个词末&lt;/p&gt;

    &lt;p&gt;f +’字符’ - 移动到本行下一个该字符处&lt;/p&gt;

    &lt;p&gt;% - 移动到括号匹配处(),包括[] 和 {}&lt;/p&gt;

    &lt;p&gt;gg - 到第一行&lt;/p&gt;

    &lt;p&gt;G  - 到最后一行&lt;/p&gt;

    &lt;p&gt;数字 + G - 到指定行 , 30G(定位到第三十行)&lt;/p&gt;

    &lt;p&gt;ctrl+u - 向下滚动半屏 ，其实效果是往上翻半页&lt;/p&gt;

    &lt;p&gt;ctrl+d - 向上滚动半屏 ，其实效果是往下翻半页&lt;/p&gt;

    &lt;p&gt;ctrl+f - 正向滚动一整屏&lt;/p&gt;

    &lt;p&gt;ctrl+b - 反向滚动一整屏&lt;/p&gt;

    &lt;p&gt;ctrl+e - 向下滚动一行，相当于鼠标滚轮滑一下&lt;/p&gt;

    &lt;p&gt;ctrl+y - 向上滚动一行，ctrl+e的逆向操作&lt;/p&gt;

    &lt;p&gt;/ + 单词 -  正向查找单词 , n - 下一处&lt;/p&gt;

    &lt;p&gt;? + 单词 - 逆向查找单词 , n -下一处&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;把光标移到那个单词下面使用 “*” 命令。Vim 会取得光标上的 单	词并把它作为被查找的字符串。
“#” 命令在反向完成相同的功能。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;”&amp;lt;” 只匹配单词的开头 ，”/&amp;lt;the”表示查找以the开头的词
“&amp;gt;” 匹配单词结尾， ,”/the&amp;gt;“表示查找以the结尾的词&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;^ + 单词 - 匹配一行，以单词开头的&lt;/p&gt;

    &lt;p&gt;单词 + $ - 匹配一行，以单词结尾的&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;可结合其他更强的正则表达式 . , ?, *等&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;dw - 删除一个单词,若跟量词则删除对应个数的单词，比如d4w，删4个.注意它会删除从当前位置到光标移动到的目标位置的全部内容。&lt;/p&gt;

    &lt;p&gt;xp - 当前光标字符和下一个字符交换位置&lt;/p&gt;

    &lt;p&gt;yw - 拷贝当前词,包括空白字符,如果你不想要这个字符,改用 “ye” 命令.&lt;/p&gt;

    &lt;p&gt;daw - 删除当前光标所在的单词，无论位于单词的哪个部分(delete  a word)&lt;/p&gt;

    &lt;p&gt;“R” 命令启动替换模式&lt;/p&gt;

    &lt;p&gt;~ - 修改光标下字符的大小写,并移动到下一个字符。这不是一个操作符 (除非设置了 ’tildeop’),所以你不能连接一个动作命令。这个命令在 可视模式下也有效,它会改变被选中的所有文本的大小写。&lt;/p&gt;

    &lt;p&gt;I 移到当前行的第一个非空字符并启动插入模式。&lt;/p&gt;

    &lt;p&gt;A 移动到行尾并启动插入模式。&lt;/p&gt;

    &lt;p&gt;ctrl-v - 进入纵向编辑模式
&amp;gt;进入列编辑模式后，可以用hjkl或者其他命令来选择范围，也可以用w一个单词一个单词选择，最后进行操作，如果想批量插入，在进入列编辑选择了行之后，用I在行首插入&lt;/p&gt;

    &lt;p&gt;:s/XXX/YYY/g - 替换当前行XXX为YYY&lt;/p&gt;

    &lt;p&gt;:%s/XXX/YYY/g - 替换所有行XXX为YYY&lt;/p&gt;

    &lt;p&gt;C - 修改当前行，会抹掉当前当前光标至行尾的内容,立即进入插入模式&lt;/p&gt;

    &lt;p&gt;ct + 字母 - 修改当前光标到字母之间的内容，立即进入插入模式&lt;/p&gt;

    &lt;p&gt;s - 替换当前字符，相当于 x+i,删掉当前字符立即进入插入模式&lt;/p&gt;

    &lt;p&gt;cis - 删掉整行，移动到行首并进入插入模式&lt;/p&gt;

    &lt;p&gt;p - 粘贴的起始位置从你当前光标位置之后开始，根据你拷贝的内容，你要么粘贴字符或单词，要么粘贴行或列。如果想撤销粘贴，使用通用撤销命令“u”就可以了。&lt;/p&gt;

    &lt;p&gt;x + p -相当于剪切，vim的x会把删掉的存在缓冲区中，再粘贴就是刚才删掉的内容&lt;/p&gt;

    &lt;p&gt;ddp - 快速交换两行位置&lt;/p&gt;

    &lt;p&gt;ctrl+o+o - 插入模式中快速新起一行&lt;/p&gt;

    &lt;p&gt;ctrl+w - 插入模式中删掉光标前一个单词&lt;/p&gt;

    &lt;p&gt;ctrl+u - 插入模式中删掉光标所在行&lt;/p&gt;

    &lt;p&gt;&amp;gt;	增加缩进,”x&amp;gt;”表示增加以下x行的缩进&lt;/p&gt;

    &lt;p&gt;&amp;lt;	减少缩进,”x&amp;lt;”表示减少以下x行的缩进&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</description>
        <pubDate>Thu, 26 Nov 2015 22:31:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/11/26/Vim-Learn/</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/11/26/Vim-Learn/</guid>
        
        
      </item>
    
  </channel>
</rss>
